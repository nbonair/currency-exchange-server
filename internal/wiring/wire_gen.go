// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/nbonair/currency-exchange-server/configs"
	"github.com/nbonair/currency-exchange-server/internal/dataaccess"
	"github.com/nbonair/currency-exchange-server/internal/dataaccess/cache"
	"github.com/nbonair/currency-exchange-server/internal/dataaccess/db"
	"github.com/nbonair/currency-exchange-server/internal/handler"
	"github.com/nbonair/currency-exchange-server/internal/lib"
	"github.com/nbonair/currency-exchange-server/internal/lib/openexchangerates"
	"github.com/nbonair/currency-exchange-server/internal/repo"
	"github.com/nbonair/currency-exchange-server/internal/router"
	"github.com/nbonair/currency-exchange-server/internal/router/rate"
	"github.com/nbonair/currency-exchange-server/internal/service"
)

// Injectors from wire.go:

func InitializeRouter(cfgDb configs.DatabaseConfig, cfgApi configs.APIsConfig, cfgCache configs.CacheConfig) (*gin.Engine, func(), error) {
	database, cleanup, err := db.InitializeDB(cfgDb)
	if err != nil {
		return nil, nil, err
	}
	exchangeRateRepository := repo.NewExchangeRateRepository(database)
	exchangeRateHistoryRepository := repo.NewExchangeRateHistoryRepository(database)
	openExchangeRateClient, err := openexchangerates.NewOpenExchangeRateClient(cfgApi)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client := cache.NewRedisClient(cfgCache)
	exchangeRateCache := cache.NewExchangeRateCache(client)
	exchangeRateService := service.NewExchangeRateService(exchangeRateRepository, exchangeRateHistoryRepository, openExchangeRateClient, exchangeRateCache)
	exchangeRateHandler := handler.NewExchangeRateHandler(exchangeRateService)
	exchangeRateRouter := rate.NewExchangeRateRouter(exchangeRateHandler)
	appRouter := router.NewAppRouter(exchangeRateRouter)
	engine := router.NewRouter(appRouter)
	return engine, func() {
		cleanup()
	}, nil
}

// wire.go:

var RepositorySet = wire.NewSet(dataaccess.WireSet, lib.WireSet, repo.WireSet)

var ServiceSet = wire.NewSet(service.NewExchangeRateService)

var HandlerSet = wire.NewSet(handler.NewExchangeRateHandler)

var ApplicationSet = wire.NewSet(
	RepositorySet,
	ServiceSet,
	HandlerSet,
)
